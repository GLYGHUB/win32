IInspectable|
import 'dart:ffi';
import 'dart:typed_data';

import 'package:ffi/ffi.dart';
import 'package:meta/meta.dart';

import '../allocator.dart';
import '../bstr.dart';
import '../constants.dart';
import '../constants.g.dart';
import '../enums.g.dart';
import '../exception.dart';
import '../extensions/iunknown.dart';
import '../extensions/pointer.dart';
import '../guid.dart';
import '../hresult.dart';
import '../hstring.dart';
import '../macros.dart';
import '../ntstatus.dart';
import '../pcstr.dart';
import '../pcwstr.dart';
import '../pstr.dart';
import '../pwstr.dart';
import '../structs.g.dart';
import '../types.dart';
import '../utils.dart';
import 'interface.g.dart';
import 'iunknown.g.dart';

/// @nodoc
final IID_IInspectable = Guid.fromComponents(
  0xaf86e2e0,
  0xb12d,
  0x4c6a,
  Uint8List.fromList(const [0x9c, 0x5a, 0xd7, 0xaa, 0x65, 0x10, 0x1e, 0x90]),
);

/// Provides functionality required for all Windows Runtime classes.
///
/// To learn more, see
/// <https://learn.microsoft.com/windows/win32/api/inspectable/nn-inspectable-iinspectable>.
///
/// {@category com}
class IInspectable extends IUnknown implements ComInterface {
  /// Creates a new instance of [IInspectable] from a [VTablePointer].
  ///
  /// This constructor requires a valid pointer to the [IInspectable] interface.
  /// The [ptr] must not be [nullptr]; otherwise, an assertion error is thrown.
  ///
  /// A [NativeFinalizer] is attached to the object to ensure that the [release]
  /// method is automatically called when the object is GCed, preventing memory
  /// leaks.
  IInspectable(super.ptr) : _vtable = ptr.value.cast<IInspectableVtbl>().ref;

  /// Creates a new instance of [IInspectable] from an existing [interface].
  ///
  /// This factory constructor calls the [cast] method on the provided
  /// [interface], which internally uses the [queryInterface] method to obtain a
  /// reference to the [IInspectable] interface.
  ///
  /// If [releaseOriginal] is set to `true`, the existing [interface] is
  /// _released_ by calling the [release] method before returning the new
  /// instance.
  ///
  /// Throws a [WindowsException] if the [queryInterface] call fails.
  @pragma('vm:prefer-inline')
  factory IInspectable.from(
    IUnknown interface, {
    bool releaseOriginal = false,
  }) => interface.cast(releaseOriginal: releaseOriginal);

  final IInspectableVtbl _vtable;
  late final _GetIidsFn =
      _vtable.GetIids.asFunction<
        int Function(VTablePointer, Pointer<Uint32>, Pointer<Pointer<GUID>>)
      >();
  late final _GetRuntimeClassNameFn =
      _vtable.GetRuntimeClassName.asFunction<
        int Function(VTablePointer, Pointer<HSTRING>)
      >();
  late final _GetTrustLevelFn = _vtable
      .GetTrustLevel.asFunction<int Function(VTablePointer, Pointer<Int32>)>();

  /// Gets the interfaces that are implemented by the current Windows Runtime
  /// class.
  ///
  /// Throws a [WindowsException] on failure.
  ///
  /// To learn more, see
  /// <https://learn.microsoft.com/windows/win32/api/inspectable/nf-inspectable-iinspectable-getiids>.
  @pragma('vm:prefer-inline')
  void getIids(Pointer<Uint32> iidCount, Pointer<Pointer<GUID>> iids) {
    final hr$ = HRESULT(_GetIidsFn(ptr, iidCount, iids));
    if (hr$.isError) throw WindowsException(hr$);
  }

  /// Gets the fully qualified name of the current Windows Runtime object.
  ///
  /// Throws a [WindowsException] on failure.
  ///
  /// To learn more, see
  /// <https://learn.microsoft.com/windows/win32/api/inspectable/nf-inspectable-iinspectable-getruntimeclassname>.
  int getRuntimeClassName() {
    final className = loggingCalloc<HSTRING>();
    final hr$ = HRESULT(_GetRuntimeClassNameFn(ptr, className));
    if (hr$.isError) {
      free(className);
      throw WindowsException(hr$);
    }
    final result$ = className.value;
    free(className);
    return result$;
  }

  /// Gets the trust level of the current Windows Runtime object.
  ///
  /// Throws a [WindowsException] on failure.
  ///
  /// To learn more, see
  /// <https://learn.microsoft.com/windows/win32/api/inspectable/nf-inspectable-iinspectable-gettrustlevel>.
  TrustLevel getTrustLevel() {
    final trustLevel = loggingCalloc<Int32>();
    final hr$ = HRESULT(_GetTrustLevelFn(ptr, trustLevel));
    if (hr$.isError) {
      free(trustLevel);
      throw WindowsException(hr$);
    }
    final result$ = trustLevel.value;
    free(trustLevel);
    return TrustLevel(result$);
  }

  @override
  String toString() => 'IInspectable(ptr: $ptr)';
}

/// @nodoc
base class IInspectableVtbl extends Struct {
  external IUnknownVtbl base$;
  external Pointer<
    NativeFunction<
      Int32 Function(
        VTablePointer this$,
        Pointer<Uint32> iidCount,
        Pointer<Pointer<GUID>> iids,
      )
    >
  >
  GetIids;
  external Pointer<
    NativeFunction<
      Int32 Function(VTablePointer this$, Pointer<HSTRING> className)
    >
  >
  GetRuntimeClassName;
  external Pointer<
    NativeFunction<
      Int32 Function(VTablePointer this$, Pointer<Int32> trustLevel)
    >
  >
  GetTrustLevel;
}

@internal
final class IInspectableCompanion extends ComCompanion<IInspectable> {
  const IInspectableCompanion();

  @pragma('vm:prefer-inline')
  @override
  IInspectable Function(VTablePointer) get fromPointer => IInspectable.new;

  @pragma('vm:prefer-inline')
  @override
  Guid get iid => IID_IInspectable;
}
