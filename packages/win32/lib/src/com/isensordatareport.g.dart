// Dart representation of a COM interface.
//
// THIS FILE IS GENERATED AUTOMATICALLY AND SHOULD NOT BE EDITED DIRECTLY.
//
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: constant_identifier_names, non_constant_identifier_names
// ignore_for_file: specify_nonobvious_property_types, unused_import

import 'dart:ffi';
import 'dart:typed_data';

import 'package:ffi/ffi.dart';
import 'package:meta/meta.dart';

import '../allocator.dart';
import '../bstr.dart';
import '../constants.dart';
import '../constants.g.dart';
import '../exception.dart';
import '../extensions/iunknown.dart';
import '../extensions/pointer.dart';
import '../guid.dart';
import '../hresult.dart';
import '../hstring.dart';
import '../macros.dart';
import '../ntstatus.dart';
import '../pcstr.dart';
import '../pcwstr.dart';
import '../propertykey.dart';
import '../propvariant.dart';
import '../pstr.dart';
import '../pwstr.dart';
import '../structs.g.dart';
import '../types.dart';
import '../utils.dart';
import 'interface.g.dart';
import 'iportabledevicekeycollection.g.dart';
import 'iportabledevicevalues.g.dart';
import 'iunknown.g.dart';

/// @nodoc
final IID_ISensorDataReport = Guid.fromComponents(
  0xab9df9b,
  0xc4b5,
  0x4796,
  Uint8List.fromList(const [0x88, 0x98, 0x4, 0x70, 0x70, 0x6a, 0x2e, 0x1d]),
);

/// Represents a sensor data report.
///
/// Sensor data reports contain data field values generated by a sensor and a
/// time stamp that indicates when the data report was created.
///
/// To learn more, see
/// <https://learn.microsoft.com/windows/win32/api/sensorsapi/nn-sensorsapi-isensordatareport>.
///
/// {@category com}
class ISensorDataReport extends IUnknown implements ComInterface {
  /// Creates a new instance of [ISensorDataReport] from a [VTablePointer].
  ///
  /// This constructor requires a valid pointer to the [ISensorDataReport]
  /// interface. The [ptr] must not be [nullptr]; otherwise, an assertion error
  /// is thrown.
  ///
  /// A [NativeFinalizer] is attached to the object to ensure that the [release]
  /// method is automatically called when the object is GCed, preventing memory
  /// leaks.
  ISensorDataReport(super.ptr)
    : _vtable = ptr.value.cast<ISensorDataReportVtbl>().ref;

  /// Creates a new instance of [ISensorDataReport] from an existing
  /// [interface].
  ///
  /// This factory constructor calls the [cast] method on the provided
  /// [interface], which internally uses the [queryInterface] method to obtain a
  /// reference to the [ISensorDataReport] interface.
  ///
  /// If [releaseOriginal] is set to `true`, the existing [interface] is
  /// _released_ by calling the [release] method before returning the new
  /// instance.
  ///
  /// Throws a [WindowsException] if the [queryInterface] call fails.
  @pragma('vm:prefer-inline')
  factory ISensorDataReport.from(
    IUnknown interface, {
    bool releaseOriginal = false,
  }) => interface.cast(releaseOriginal: releaseOriginal);

  final ISensorDataReportVtbl _vtable;
  late final _GetTimestampFn =
      _vtable.GetTimestamp.asFunction<
        int Function(VTablePointer, Pointer<SYSTEMTIME>)
      >();
  late final _GetSensorValueFn =
      _vtable.GetSensorValue.asFunction<
        int Function(VTablePointer, Pointer<PROPERTYKEY>, Pointer<PROPVARIANT>)
      >();
  late final _GetSensorValuesFn =
      _vtable.GetSensorValues.asFunction<
        int Function(VTablePointer, VTablePointer, Pointer<VTablePointer>)
      >();

  /// Retrieves the time at which the data report was created.
  ///
  /// Throws a [WindowsException] on failure.
  ///
  /// To learn more, see
  /// <https://learn.microsoft.com/windows/win32/api/sensorsapi/nf-sensorsapi-isensordatareport-gettimestamp>.
  Pointer<SYSTEMTIME> getTimestamp() {
    final pTimeStamp = loggingCalloc<SYSTEMTIME>();
    final hr$ = HRESULT(_GetTimestampFn(ptr, pTimeStamp));
    if (hr$.isError) {
      free(pTimeStamp);
      throw WindowsException(hr$);
    }
    return pTimeStamp;
  }

  /// Retrieves a single data field value from the data report.
  ///
  /// Throws a [WindowsException] on failure.
  ///
  /// To learn more, see
  /// <https://learn.microsoft.com/windows/win32/api/sensorsapi/nf-sensorsapi-isensordatareport-getsensorvalue>.
  Pointer<PROPVARIANT> getSensorValue(Pointer<PROPERTYKEY> pKey) {
    final pValue = loggingCalloc<PROPVARIANT>();
    final hr$ = HRESULT(_GetSensorValueFn(ptr, pKey, pValue));
    if (hr$.isError) {
      free(pValue);
      throw WindowsException(hr$);
    }
    return pValue;
  }

  /// Retrieves a collection of data field values.
  ///
  /// Throws a [WindowsException] on failure.
  ///
  /// To learn more, see
  /// <https://learn.microsoft.com/windows/win32/api/sensorsapi/nf-sensorsapi-isensordatareport-getsensorvalues>.
  IPortableDeviceValues? getSensorValues(IPortableDeviceKeyCollection? pKeys) {
    final ppValues = loggingCalloc<VTablePointer>();
    final hr$ = HRESULT(
      _GetSensorValuesFn(ptr, pKeys?.ptr ?? nullptr, ppValues),
    );
    if (hr$.isError) {
      free(ppValues);
      throw WindowsException(hr$);
    }
    final result$ = ppValues.value;
    free(ppValues);
    if (result$.isNull) return null;
    return IPortableDeviceValues(result$);
  }

  @override
  String toString() => 'ISensorDataReport(ptr: $ptr)';
}

/// @nodoc
base class ISensorDataReportVtbl extends Struct {
  external IUnknownVtbl base$;
  external Pointer<
    NativeFunction<
      Int32 Function(VTablePointer this$, Pointer<SYSTEMTIME> pTimeStamp)
    >
  >
  GetTimestamp;
  external Pointer<
    NativeFunction<
      Int32 Function(
        VTablePointer this$,
        Pointer<PROPERTYKEY> pKey,
        Pointer<PROPVARIANT> pValue,
      )
    >
  >
  GetSensorValue;
  external Pointer<
    NativeFunction<
      Int32 Function(
        VTablePointer this$,
        VTablePointer pKeys,
        Pointer<VTablePointer> ppValues,
      )
    >
  >
  GetSensorValues;
}

@internal
final class ISensorDataReportCompanion extends ComCompanion<ISensorDataReport> {
  const ISensorDataReportCompanion();

  @pragma('vm:prefer-inline')
  @override
  ISensorDataReport Function(VTablePointer) get fromPointer =>
      ISensorDataReport.new;

  @pragma('vm:prefer-inline')
  @override
  Guid get iid => IID_ISensorDataReport;
}
